reset
set term wxt size 900, 800 font ",12"
set mxtics
set mytics
set style line 12 lc rgb '#ddccdd' lt 1 lw 1.5
set style line 13 lc rgb '#ddccdd' lt 1 lw 0.5
set grid xtics mxtics ytics mytics back ls 12, ls 13
set logscale y
set size square
set xtics nomirror
set xtics auto
set ytics auto
#set yrange[0.01:1]

L = 18
g = 0.2

neighbors = 0						# if =1 then take nn, =2 take nnn
AGP_or_susc = 1						# 0-typ susc; 1-AGP
SigX_or_SigZ = 1 					# 0-SigX as sum, 1-SigZ as sum

L_min = 15							# minimual system size in file
num = 4   							# number of system sizes 
f(i)=(i-2 - AGP_or_susc)/2 + L_min	# system size taken from column id

avSymSec = 0						# average over symmetry sectors?
scaling = 0							# size scaling=1 or g-scaling=0
norm = 0							# normalize by value at h=0?
if(!scaling) norm = 0
size_parity = 0						# 0-all sizes; 1-only odd size; 2-only even sizes

# GRAPH DESIGN
my_title = (AGP_or_susc == 1)? "{/*1.2 AGP for block symmetric Hamiltonian}\n{/*1.2 Operator: O=}" : \
			 "{/*1.2 Typical susceptibility for symmetric Hamiltonian}\n{/*1.2 Operator: O=}"
my_title = my_title.(SigX_or_SigZ == 0? "{/*1.2{/Symbol S}_n S^x_n}" : "{/*1.2{/Symbol S}_n S^z_n}")
if(neighbors == 1) {
	my_title = my_title.(SigX_or_SigZ == 0? "{/*1.2S^x_{n+1}}" : "{/*1.2S^z_{n+1}}")
}
if(neighbors == 2){
	my_title = my_title.(SigX_or_SigZ == 0? "{/*1.2S^x_{n+2}}" : "{/*1.2S^z_{n+2}}")
}
my_title = my_title.(scaling? sprintf(" for g = %.2f", g) : sprintf(" for L = %d", L))
set title my_title

set key outside right

lam = SigX_or_SigZ? "h" : "g";
#set ylabel (AGP_or_susc == 1)? '{/*1.3|{/Symbol L}_{{/Symbol l}}|^2 / L}' : \
			( scaling == 1?'{/*1.3 D({/Symbol w}_H)^2{/Symbol c}_{typ}(O) / L}' : '{/*1.3 {/Symbol c}_{typ}(O) / L^2}')
set ylabel (AGP_or_susc == 1)? '{/*1.3|{/Symbol L}_'.lam.'|^2'.(norm? "/ |{/Symbol L}_{".lam."=0}|^2}" : " ")\
 : '{/*1.3 {/Symbol c}_{typ}(O)'.(norm? "/ {/Symbol c}_{typ}(O, h=0)}" : " ")
set xlabel '{/*1.3h}'


## PLOT
name = 'AGPsym'.(SigX_or_SigZ == 0? 'SigX' : 'SigZ')
if(neighbors == 1) {
	name = name.'nn'
}
if(neighbors == 2){
	name = name.'nnn'
}
gname = name; # save name to plot g scaling
name = name.sprintf(",g=%.2f",g).(avSymSec? ".dat" : ",k=0,p=1,x=1.dat")
chi = 0.341345
rescale(L, h) = L * L / chi / chi * (g*g + h*h)
chi = 0.341345													#gaussian normalization
wH(hx, N, L) = sqrt(L) / (chi * N) * sqrt(1 + hx * hx + g * g);	# mean level spacing
g(hx,L) = wH(hx, 2**L, L)**0.5

array val[num]
do for[i=AGP_or_susc+2:2*num+1:2]{
	stats name every ::1::2 using i nooutput
	val[f(i) - L_min + 1] = (norm ? STATS_min : 1.0)
}

if(scaling){
	i0 = AGP_or_susc + 2
	if(size_parity > 0){
		i0 = i0 + (( (size_parity == 1)^(L_min%2) )? 2 : 0)
	}
	imax = 2*num+1
	di = 2 + (size_parity > 0? 2 : 0)
	plot for[i=i0:imax:di] name u 1:(column(i) / val[f(i) - L_min + 1]) w lp lc abs(f(i)-L) pt 7 ps 0.7 title sprintf("L=%d", f(i))
} else{
	glist = '0.10 0.20 0.30 0.50 0.80 1.00 1.20 1.50'
	i = 2*(L - L_min + 1) + AGP_or_susc
	plot for [gx in glist] gname.",g=".gx.(avSymSec? ".dat" : ",k=0,p=1,x=1.dat") u 1:(column(i)) w lp pt 7 ps 0.7 title "g=".gx
}

#plot for[i=AGP_or_susc+2:2*num+1:2] name u ($1*y(f(i))):(column(i)) w l lw 1.5 title sprintf("L=%d", f(i))

#plot name u 1:($2*g($1,8)) w l lw 1.5 title sprintf("L=%d", 8),\
	name u 1:($4*g($1,9)) w l lw 1.5 title sprintf("L=%d", 9),\
	name u 1:($6*g($1,10)) w l lw 1.5 title sprintf("L=%d", 10),\
	name u 1:($8*g($1,11)) w l lw 1.5 title sprintf("L=%d", 11),\
	name u 1:($10*g($1,12)) w l lw 1.5 title sprintf("L=%d", 12),\
	name u 1:($12*g($1,13)) w l lw 1.5 title sprintf("L=%d", 13)
#plot name u 1:($2*rescale(8, $2)/30) w l lw 1.5 title sprintf("L=%d", 8),\
	name u 1:($4*rescale(9, $2)/46) w l lw 1.5 title sprintf("L=%d", 9),\
	name u 1:($6*rescale(10, $2)/78) w l lw 1.5 title sprintf("L=%d", 10),\
	name u 1:($8*rescale(11, $2)/126) w l lw 1.5 title sprintf("L=%d", 11)