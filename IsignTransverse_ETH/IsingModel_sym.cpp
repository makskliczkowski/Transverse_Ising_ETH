#include "include/IsingModel.h"

/* CONSTRUCTORS */
 IsingModel_sym::IsingModel_sym(int L, double J, double g, double h, int k_sym, bool p_sym, bool x_sym, int _BC) {
	this->L = L; this->J = J; this->g = g; this->h = h; this->_BC = _BC;
	symmetries.k_sym = k_sym * two_pi / double(this->L);
	symmetries.p_sym = (p_sym) ? 1.0 : -1.0;
	symmetries.x_sym = (x_sym) ? 1.0 : -1.0;
	k_sector = abs(this->symmetries.k_sym) < 1e-4 || abs(this->symmetries.k_sym - pi) < 1e-4;

	this->info = "_L=" + std::to_string(this->L) + \
		",g=" + to_string_prec(this->g,2) + \
		",h=" + to_string_prec(this->h,2) + \
		",k=" + std::to_string(k_sym) + \
		",p=" + std::to_string(symmetries.p_sym) + \
		",x=" + std::to_string(symmetries.x_sym);	

	// precalculate the exponents
	this->k_exponents = v_1d<cpx>(this->L, 0.0);
#pragma omp parallel for
	for (int l = 0; l < this->L; l++)
		this->k_exponents[l] = std::exp(-1i * this->symmetries.k_sym * double(l));

	this->mapping = std::vector<u64>();
	this->normalisation = std::vector<cpx>();
	generate_mapping();

	this->set_neighbors(); // generate neighbors
	hamiltonian();
}

/* BASE GENERATION, SEC CLASSES AND RAPPING*/
 u64 IsingModel_sym::map(u64 index) {
	if (index >= this->N) throw "Element out of range\n No such index in map\n";
	return this->mapping[index];
}
/// <summary>
/// Finds the representative of the equivalent class after vector rotation (mainly used after applied another symmetry)
/// </summary>
/// <param name="base_vector"> vector from EC to find representative </param>
/// <returns> index of the representative state in the EC </returns>
 std::tuple<u64, int> IsingModel_sym::find_translation_representative(std::vector<bool>& base_vector) const {
	u64 EC_symmetry = binary_to_int(base_vector);
	u64 current_idx = EC_symmetry;
	u64 idx = INT_MAX;
	int counter = 1, count_to_rep = 1;
	while (idx != current_idx) {
		std::rotate(base_vector.begin(), base_vector.begin() + 1, base_vector.end());
		idx = binary_to_int(base_vector);
		counter++;
		if (idx < EC_symmetry) {
			EC_symmetry = idx;
			count_to_rep = counter;
		}
	}
	return std::make_tuple(EC_symmetry, count_to_rep);
}
/// <summary>
/// Find representatives of other EC generated by reflection, spin-flip and (reflection x spin-flip) symmetry
/// </summary>
/// <param name="base_vector"> current base vector to act with symmetries </param>
/// <param name="min"> index of EC class representative by translation symmetry </param>
/// <returns></returns>
 std::tuple<u64, int> IsingModel_sym::find_SEC_representative(const std::vector<bool>& base_vector) const {
	std::vector<u64> minima;
	std::vector<bool> temp = base_vector;
	bool k_sector = abs(symmetries.k_sym) < 1e-4 || abs(symmetries.k_sym - pi) < 1e-4;

	//check reflection symmetry
	std::reverse(temp.begin(), temp.end());
	auto tupleR = find_translation_representative(temp);
	minima.push_back((k_sector ? std::get<0>(tupleR) : INT_MAX));

	if (this->h == 0) {
		temp = base_vector;

		// check spin-flip
		temp.flip();
		auto tupleX = find_translation_representative(temp);
		minima.push_back(std::get<0>(tupleX));

		// check spin-flip and reflection
		std::reverse(temp.begin(), temp.end());
		auto tupleRX = find_translation_representative(temp);
		minima.push_back((k_sector ? std::get<0>(tupleRX) : INT_MAX));

		switch (std::min_element(minima.begin(), minima.end()) - minima.begin()) {
		case 1:
			return std::make_tuple(minima[1], symmetries.x_sym * std::get<1>(tupleX)); break;
		case 0:
			return std::make_tuple(minima[0], symmetries.p_sym * std::get<1>(tupleR)); break;
		case 2:
			return std::make_tuple(minima[2], symmetries.p_sym * symmetries.x_sym * std::get<1>(tupleRX)); break;
		default: throw "Index out of range\n";
		}
	}
	else
		return std::make_tuple(std::get<0>(tupleR), symmetries.p_sym * std::get<1>(tupleR));
}

/// <summary>
///
/// </summary>
/// <param name="base_vector"></param>
/// <param name="k"></param>
/// <returns></returns>
 cpx IsingModel_sym::get_symmetry_normalization(std::vector<bool>& base_vector, u64 k) {
	cpx normalisation = cpx(0.0, 0.0);
	std::vector<bool> PT = base_vector;
	std::reverse(PT.begin(), PT.end());

	std::vector<bool> ZT = base_vector;
	ZT.flip();

	std::vector<bool> PZT = ZT;
	std::reverse(PZT.begin(), PZT.end());

	for (int l = 0; l < this->L; l++) {
		if (binary_to_int(base_vector) == k)
			normalisation += this->k_exponents[l];
		std::rotate(base_vector.begin(), base_vector.begin() + 1, base_vector.end());
		if (this->k_sector){
			if (binary_to_int(PT) == k) 
				normalisation += ((double)this->symmetries.p_sym) * this->k_exponents[l];
			std::rotate(PT.begin(), PT.begin() + 1, PT.end());
		}
		if ((this->h == 0)){
			if (binary_to_int(ZT) == k)
				normalisation += ((double)this->symmetries.x_sym) * this->k_exponents[l];
			std::rotate(ZT.begin(), ZT.begin() + 1, ZT.end());
			if (this->k_sector) {
				if (binary_to_int(PZT) == k)
					normalisation += ((double)this->symmetries.p_sym * (double)this->symmetries.x_sym) * this->k_exponents[l];
				std::rotate(PZT.begin(), PZT.begin() + 1, PZT.end());
			}
		}
	}
	return std::sqrt(normalisation);
}

/// <summary>
/// Generates the mapping to the reduced Hilbert space (reduced by symmetries: translation, spin-flip and reflection symmetry
/// adding Sz=0 (total spin) symmetry is straightforward, however, the transverse field breaks the SU(2) symmetry;
///
/// The procedure hase been successfully optimized using multithreading:
/// - each thread functions in the range [start, stop)
/// </summary>
/// <param name="start"> first index for a given thread from the original Hilbert space </param>
/// <param name="stop"> last index for a given thread from the original Hilbert space </param>
/// <param name="map_threaded"> vector containing the mapping from the reduced basis to the original Hilbert space
///                             for a given thread, the whole mapping will be merged in the generate_mapping() procedure </param>
/// <param name="_id"> identificator for a given thread </param>
 void IsingModel_sym::mapping_kernel(u64 start, u64 stop, std::vector<u64>& map_threaded, std::vector<cpx>& norm_threaded, int _id) {
	std::vector<bool> base_vector(this->L); // temporary dirac-notation base vector
	for (u64 j = start; j < stop; j++) {
		int_to_binary(j, base_vector);
		if (this->g == 0 && std::accumulate(base_vector.begin(), base_vector.end(), 0) != this->L / 2.) continue;
		//check translation
		auto [min, trans_eig] = find_translation_representative(base_vector);

		u64 min_R_RX = INT_MAX;
		if (min == j) {
			auto tuple = find_SEC_representative(base_vector);
			min_R_RX = std::get<0>(tuple);
		}
		if (min_R_RX < j) continue;

		if (std::min(min, min_R_RX) == j) {
			cpx N = get_symmetry_normalization(base_vector, j);             // normalisation condition -- check wether state in basis
			if (std::abs(N) > 1e-6) {
				//out << base_vector << "\t\t" << N << endl;
				map_threaded.push_back(j);
				norm_threaded.push_back(N);
			}
		}
	}
}
/// <summary>
/// Splits the mapping onto threads, where each finds basis states in the reduced Hilbert space within a given range.
/// The mapping is retrieved by concatenating the resulting maps from each thread
/// </summary>
 void IsingModel_sym::generate_mapping() {
	u64 start = 0, stop = static_cast<u64>(std::pow(2, this->L)); // because parity reflects the other half
	if (num_of_threads == 1)
		mapping_kernel(start, stop, this->mapping, this->normalisation, 0);
	else {
		//Threaded
		v_2d<u64> map_threaded(num_of_threads);
		v_2d<cpx> norm_threaded(num_of_threads);
		std::vector<std::thread> threads;
		threads.reserve(num_of_threads);
		for (int t = 0; t < num_of_threads; t++) {
			start = (u64)(std::pow(2, this->L) / (double)num_of_threads * t);
			stop = ((t + 1) == num_of_threads ? (u64)std::pow(2, this->L) : u64(std::pow(2, this->L) / (double)num_of_threads * (double)(t + 1)));
			map_threaded[t] = v_1d<u64>();
			norm_threaded[t] = v_1d<cpx>();
			threads.emplace_back(&IsingModel_sym::mapping_kernel, this, start, stop, ref(map_threaded[t]), ref(norm_threaded[t]), t);
		}
		for (auto& t : threads) t.join();

		for (auto& t : map_threaded)
			this->mapping.insert(this->mapping.end(), std::make_move_iterator(t.begin()), std::make_move_iterator(t.end()));

		for (auto& t : norm_threaded)
			this->normalisation.insert(this->normalisation.end(), std::make_move_iterator(t.begin()), std::make_move_iterator(t.end()));
	}
	this->N = this->mapping.size();
	//assert(mapping.size() > 0 && "Not possible number of electrons - no. of states < 1");
}

/* BUILDING HAMILTONIAN */

/// <summary>
/// 
/// </summary>
/// <param name="base"></param>
/// <param name="sector_alfa"></param>
/// <param name="normalisation_beta"></param>
/// <returns></returns>
 
std::pair<u64, cpx> find_rep_and_sym_eigval(v_1d<bool>& base, const IsingModel_sym& sector_alfa, cpx normalisation_beta){
	u64 idx = binary_search(sector_alfa.mapping, 0, sector_alfa.N - 1, binary_to_int(base));
	int sym_eig = 1;
	if (idx > sector_alfa.N) {
		auto tup_T = sector_alfa.find_translation_representative(base);
		auto tup_S = sector_alfa.find_SEC_representative(base);
		auto [min, trans_eig] = (std::get<0>(tup_T) > std::get<0>(tup_S)) ? tup_S : tup_T;
		sym_eig = trans_eig;
		//finding index in reduced Hilbert space
		idx = binary_search(sector_alfa.mapping, 0, sector_alfa.N - 1, min);
	}
	if (idx < sector_alfa.N) {
		cpx translation_eig = conj(sector_alfa.k_exponents[abs(sym_eig) - 1]);
		cpx val = translation_eig * (sector_alfa.normalisation[idx] / normalisation_beta) * double(sgn(sym_eig));
		return std::make_pair(idx, val);
	}
	else
		return std::make_pair(INT_MAX, 0);
}

/// <summary>
/// Sets the non-diagonal elements of the Hamimltonian matrix with symmetry sectors: therefore the matrix elements are summed over the SEC
/// </summary>
/// <param name="k"> index of the basis state acted upon with the Hamiltonian </param>
/// <param name="value"> value of the given matrix element to be set </param>
/// <param name="temp"> resulting vector form acting with the Hamiltonian operator on the k-th basis state </param>
 void IsingModel_sym::setHamiltonianElem(u64 k, double value, std::vector<bool>& temp) {
	auto [idx, sym_eig] = find_rep_and_sym_eigval(temp, *this, this->normalisation[k]);
	if (idx < this->N)
		H(idx, k) += value * sym_eig;
}
/// <summary>
/// Generates the total Hamiltonian of the system. The diagonal part is straightforward,
/// while the non-diagonal terms need the specialized setHamiltonainElem(...) function
/// </summary>
 void IsingModel_sym::hamiltonian() {
	try {
		this->H = cx_mat(this->N, this->N, fill::zeros); //hamiltonian
		//this->H = arma::conv_to<arma::Mat<double>>::from(this->H);
	}
	catch (const bad_alloc& e) {
		std::cout << "Memory exceeded" << e.what() << "\n";
		assert(false);
	}
	std::vector<bool> base_vector(this->L);
	std::vector<bool> temp(base_vector); // changes under H action
	for (long int k = 0; k < this->N; k++) {
		int_to_binary(this->mapping[k], base_vector);
		double s_i;
		double s_j;
		for (int j = 0; j <= this->L - 1; j++) {
			s_i = base_vector[j] ? 1.0 : -1.0;                              // true - spin up, false - spin down
			/* transverse field */
			if (this->g != 0) {
				temp = base_vector;
				temp[j] = !base_vector[j];                                  // negates on that site
				this->setHamiltonianElem(k, this->g, temp);
			}
			/* disorder */
			this->H(k, k) += this->h * s_i;                                       // diagonal

			if (this->nearest_neighbors[j] >= 0) {
				/* Ising-like spin correlation */
				s_j = base_vector[this->nearest_neighbors[j]] ? 1.0 : -1.0;
				this->H(k, k) += this->J * s_i * s_j;
			}
		}
	}
}

/* PHYSICAL QUANTITTIES */
/// <summary>
/// <summary>
/// Calculates the matrix element for sigma_z Pauli matrix
/// </summary>
/// <param name="sites">Sites the matrix works on</param>
/// <param name="alfa">Left state</param>
/// <param name="beta">Right state</param>
/// <returns>The matrix element</returns>
 double IsingModel_sym::av_sigma_z(u64 alfa, u64 beta, std::initializer_list<int> sites) {
	auto sig_z = IsingModel_sym::sigma_z;
	return real(av_operator(alfa, beta, *this, *this, sig_z, sites));
}

/// <summary>
/// Calculates the matrix element for sigma_z extensive
/// </summary>
/// <param name="alfa">Left state</param>
/// <param name="beta">Right state</param>
/// <returns>The matrix element</returns>
 double IsingModel_sym::av_sigma_z(u64 alfa, u64 beta){
	auto sig_z = IsingModel_sym::sigma_z;
	return real(av_operator(alfa, beta, *this, *this, sig_z));
}

/// <summary>
/// Calculates the matrix element for sigma_z extensive correlations
/// </summary>
/// <param name="alfa">Left state</param>
/// <param name="beta">Right state</param>
/// <param name="corr_length">correlation length</param>
/// <returns>The matrix element</returns>
 double IsingModel_sym::av_sigma_z(u64 alfa, u64 beta, int corr_length){
	auto sig_z = IsingModel_sym::sigma_z;
	return real(av_operator(alfa, beta, *this, *this, sig_z, corr_length));
}

/// <summary>
/// Calculates the matrix element for sigma_x Pauli matrix
/// </summary>
/// <param name="sites">Sites the matrix works on</param>
/// <param name="alfa">Left state</param>
/// <param name="beta">Right state</param>
/// <returns>The matrix element</returns>
 double IsingModel_sym::av_sigma_x(u64 alfa, u64 beta, std::initializer_list<int> sites){
	auto sig_x = IsingModel_sym::sigma_x;
	return real(av_operator(alfa, beta, *this, *this, sig_x, sites));
}

/// <summary>
/// Calculates the matrix element for sigma_x extensive
/// </summary>
/// <param name="alfa">Left state</param>
/// <param name="beta">Right state</param>
/// <returns>The matrix element</returns>
 double IsingModel_sym::av_sigma_x(const u64 alfa, const u64 beta) {
	auto sig_x = IsingModel_sym::sigma_x;
	return real(av_operator(alfa, beta, *this, *this, sig_x));
}

/// <summary>
/// Calculates the matrix element for sigma_x extensive correlations
/// </summary>
/// <param name="alfa">Left state</param>
/// <param name="beta">Right state</param>
/// <param name="corr_length">correlation length</param>
/// <returns>The matrix element</returns>
 double IsingModel_sym::av_sigma_x(u64 alfa, u64 beta, int corr_length){
	auto sig_x = IsingModel_sym::sigma_x;
	return real(av_operator(alfa, beta, *this, *this, sig_x, corr_length));
}

 /// <summary>
 /// 
 /// </summary>
 /// <param name="alfa"></param>
 /// <param name="beta"></param>
 /// <returns></returns>
 double IsingModel_sym::av_spin_flip(u64 alfa, u64 beta) {
	 auto spin_flip = IsingModel_sym::spin_flip;
	 auto value = av_operator(alfa, beta, *this, *this, spin_flip);
	 value += conj(av_operator(beta, alfa, *this, *this, spin_flip));
	 return 0.5 * real(value);
 }

 /// <summary>
 /// 
 /// </summary>
 /// <param name="alfa"></param>
 /// <param name="beta"></param>
 /// <param name="sites"></param>
 /// <returns></returns>
 double IsingModel_sym::av_spin_flip(u64 alfa, u64 beta, std::initializer_list<int> sites) {
	 auto spin_flip = IsingModel_sym::spin_flip;
	 auto value = av_operator(alfa, beta, *this, *this, spin_flip, sites);
	 value += conj(av_operator(beta, alfa, *this, *this, spin_flip, sites));
	 return 0.5 * real(value);
 }

 /// <summary>
 /// 
 /// </summary>
 /// <param name="alfa"></param>
 /// <param name="beta"></param>
 /// <returns></returns>
 cpx IsingModel_sym::av_spin_current(u64 alfa, u64 beta) {
	 auto spin_flip = IsingModel_sym::spin_flip;
	 auto value = im * av_operator(alfa, beta, *this, *this, spin_flip, 1);
	 value += conj(im * av_operator(beta, alfa, *this, *this, spin_flip, 1));
	 return 0.5i * value;
 }

 /// <summary>
 /// 
 /// </summary>
 /// <param name="alfa"></param>
 /// <param name="beta"></param>
 /// <param name="sites"></param>
 /// <returns></returns>
 cpx IsingModel_sym::av_spin_current(u64 alfa, u64 beta, std::initializer_list<int> sites) {
	 auto spin_flip = IsingModel_sym::spin_flip;
	 auto value = im * av_operator(alfa, beta, *this, *this, spin_flip, sites);
	 value += conj(im * av_operator(beta, alfa, *this, *this, spin_flip, sites));
	 return 0.5i * value;
 }
 
 // WRAPPERS FOR SIGMA OPERATORS
/// <summary>
///
/// </summary>
/// <param name="alfa"></param>
/// <param name="beta"></param>
/// <param name="sec_alfa"></param>
/// <param name="sec_beta"></param>
/// <param name="op"></param>
/// <param name="sites"></param>
/// <returns></returns>
cpx av_operator(u64 alfa, u64 beta, const IsingModel_sym& sec_alfa, const IsingModel_sym& sec_beta,\
	std::function<std::pair<cpx,v_1d<bool>>(const v_1d<bool>&, std::initializer_list<int>)> op, std::initializer_list<int> sites){
	// throwables
	for(auto& site: sites)
		if ((site < 0 || site >= sec_alfa.L) && sec_alfa.L != sec_beta.L) throw "Site index exceeds chain or incompatible chain lengths. Your choice\n";
	if(sec_alfa.J != sec_beta.J || sec_alfa.h != sec_beta.h || sec_alfa.g != sec_beta.g) throw "incompatible model parameters, sun \\('.')// \n";

	arma::subview_col state_alfa = sec_alfa.eigenvectors.col(alfa);
	arma::subview_col state_beta = sec_beta.eigenvectors.col(beta);

	// calculating normalisation for both sector symmetry groups
	double G = 0;
	double G_alfa = sec_alfa.L;
	double G_beta = G_alfa;
	if (sec_alfa.h == 0){
		G_alfa += sec_alfa.L;
		G_beta += sec_beta.L;
	}
	if (sec_alfa.k_sector) G_alfa += (sec_alfa.h == 0) ? 2 * sec_alfa.L : sec_alfa.L;
	if (sec_beta.k_sector) G_beta += (sec_beta.h == 0) ? 2 * sec_beta.L : sec_beta.L;
	G = std::sqrt(G_alfa * G_beta);
	
	// going through all sector beta states
	double overlap_real = 0;
	double overlap_imag = 0;
#pragma omp parallel
	{	
		std::vector<bool> base_vector(sec_beta.L, 0);
#pragma omp for reduction(+:overlap_real, overlap_imag)
		for (int k = 0; k < sec_beta.N; k++) {
			int_to_binary(sec_beta.mapping[k], base_vector);
			cpx overlap = apply_sym_overlap(state_alfa, state_beta, base_vector, sec_alfa, sec_beta, op, sites);
			overlap_real += overlap.real();
			overlap_imag += overlap.imag();
		}
	}
	return cpx(overlap_real, overlap_imag) / G;
}

/// <summary>
/// 
/// </summary>
/// <param name="alfa"></param>
/// <param name="beta"></param>
/// <param name="sec_alfa"></param>
/// <param name="sec_beta"></param>
/// <param name="op"></param>
/// <returns></returns>

cpx av_operator(u64 alfa, u64 beta, const IsingModel_sym & sec_alfa, const IsingModel_sym & sec_beta,\
	std::function<std::pair<cpx,v_1d<bool>>(const v_1d<bool>&, std::initializer_list<int>)> op){
	if (sec_alfa.L != sec_beta.L) throw "Incompatible chain lengths. Your choice\n";
	if(sec_alfa.J != sec_beta.J || sec_alfa.h != sec_beta.h || sec_alfa.g != sec_beta.g) throw "incompatible model parameters, sun \\('.')// \n";

	arma::subview_col state_alfa = sec_alfa.eigenvectors.col(alfa);
	arma::subview_col state_beta = sec_beta.eigenvectors.col(beta);

	// calculating normalisation for both sector symmetry groups
	double G = 0;
	double G_alfa = sec_alfa.L;
	double G_beta = G_alfa;
	if (sec_alfa.h == 0){
		G_alfa += sec_alfa.L;
		G_beta += sec_beta.L;
	}
	if (sec_alfa.k_sector) G_alfa += (sec_alfa.h == 0) ? 2 * sec_alfa.L : sec_alfa.L;
	if (sec_beta.k_sector) G_beta += (sec_beta.h == 0) ? 2 * sec_beta.L : sec_beta.L;
	G = std::sqrt(G_alfa * G_beta);
	
	// going through all sector beta states
	double overlap_real = 0;
	double overlap_imag = 0;
#pragma omp parallel
	{	
		std::vector<bool> base_vector(sec_beta.L, 0);
#pragma omp for reduction(+:overlap_real, overlap_imag)
		for (int k = 0; k < sec_beta.N; k++) {
			for(int l = 0; l < sec_beta.L; l++){
				int_to_binary(sec_beta.mapping[k], base_vector);
				cpx overlap = apply_sym_overlap(state_alfa, state_beta, base_vector, sec_alfa, sec_beta, op, { l });
				overlap_real += overlap.real();
				overlap_imag += overlap.imag();
			}
		}
	}
	return cpx(overlap_real, overlap_imag) / (G * sec_alfa.L);
}

/// <summary>
/// 
/// </summary>
/// <param name="alfa"></param>
/// <param name="beta"></param>
/// <param name="sec_alfa"></param>
/// <param name="sec_beta"></param>
/// <param name="op"></param>
/// <param name="corr_len"></param>
/// <returns></returns>

cpx av_operator(u64 alfa, u64 beta, const IsingModel_sym& sec_alfa, const IsingModel_sym& sec_beta,\
		std::function<std::pair<cpx,v_1d<bool>>(const v_1d<bool>&, std::initializer_list<int>)> op, int corr_len){
	if(sec_alfa.L != sec_beta.L) throw "Incompatible chain lengths. Your choice\n";
	if(corr_len >= sec_alfa.L) throw "Exceeding correlation length\n";
	if(sec_alfa.J != sec_beta.J || sec_alfa.h != sec_beta.h || sec_alfa.g != sec_beta.g) throw "incompatible model parameters, sun \\('.')// \n";

	arma::subview_col state_alfa = sec_alfa.eigenvectors.col(alfa);
	arma::subview_col state_beta = sec_beta.eigenvectors.col(beta);

	// calculating normalisation for both sector symmetry groups
	double G = 0;
	double G_alfa = sec_alfa.L;
	double G_beta = G_alfa;
	if (sec_alfa.h == 0){
		G_alfa += sec_alfa.L;
		G_beta += sec_beta.L;
	}
	if (sec_alfa.k_sector) G_alfa += (sec_alfa.h == 0) ? 2 * sec_alfa.L : sec_alfa.L;
	if (sec_beta.k_sector) G_beta += (sec_beta.h == 0) ? 2 * sec_beta.L : sec_beta.L;
	G = std::sqrt(G_alfa * G_beta);
	
	auto neis = get_neigh_vector(sec_alfa._BC, sec_alfa.L, corr_len);
	// going through all sector beta states

	double overlap_real = 0;
	double overlap_imag = 0;
#pragma omp parallel
	{	
		std::vector<bool> base_vector(sec_beta.L, 0);
#pragma omp for reduction(+:overlap_real, overlap_imag)
		for (int k = 0; k < sec_beta.N; k++) {
			for(int l = 0; l < sec_beta.L; l++){
				int_to_binary(sec_beta.mapping[k], base_vector);
				const int nei = neis[l];
				if(nei >= 0){
					cpx overlap = apply_sym_overlap(state_alfa, state_beta, base_vector, sec_alfa,sec_beta,op,{l, nei});
					overlap_real += overlap.real();
					overlap_imag += overlap.imag();
				}
			}
		}
	}
	return cpx(overlap_real, overlap_imag) / (G * sec_alfa.L);


}

/// <summary>
/// 
/// </summary>
/// <param name="site"></param>
/// <param name="alfa"></param>
/// <param name="beta"></param>
/// <param name="base_vec"></param>
/// <param name="sec_alfa"></param>
/// <param name="sec_beta"></param>
/// <param name="op"></param>
/// <param name="sites"></param>
/// <returns></returns>

cpx apply_sym_overlap(const arma::subview_col<cpx>& alfa, const arma::subview_col<cpx>& beta, const v_1d<bool>& base_vec, const IsingModel_sym& sec_alfa, \
	const IsingModel_sym& sec_beta, std::function<std::pair<cpx, v_1d<bool>>(const v_1d<bool>&, std::initializer_list<int>)> op, std::initializer_list<int> sites)
{
	const u64 k = binary_search(sec_beta.mapping, 0, sec_beta.N - 1, binary_to_int(base_vec));									// index of the current base vector

	auto get_overlap_sym = [&](const v_1d<bool>& vec_sym, cpx sym_eig) {
		cpx overlap = 0.0;
		auto [val_sym_beta, vec_sym_tmp] = op(vec_sym, sites);
		if (abs(val_sym_beta) > 1e-14) {
			auto [idx_sym, val_sym_alfa] = !(vec_sym == vec_sym_tmp) ?\
				find_rep_and_sym_eigval(vec_sym_tmp, sec_alfa, sec_beta.normalisation[k]) : std::make_pair(k, conj(sym_eig));
			if (idx_sym < sec_alfa.N)
				overlap = sym_eig * conj(val_sym_alfa * alfa(idx_sym)) * beta(k) * val_sym_beta;
		}
		return overlap;
	};

	std::vector<bool> Translation = base_vec;					// Translation
	std::vector<bool> PT;										// Parity translation
	std::vector<bool> ZT;										// Flip translation
	std::vector<bool> PZT;										// Parity Flip translation
	if (sec_beta.k_sector) {
		PT = base_vec;
		std::reverse(PT.begin(), PT.end());
	}
	if (sec_beta.h == 0) {
		ZT = base_vec;
		ZT.flip();
		if (sec_beta.k_sector) {
			PZT = ZT;
			std::reverse(PZT.begin(), PZT.end());
		}
	}

	cpx overlap = 0.0;
	for (int l = 0; l < sec_alfa.L; l++) {
		auto T_eig = sec_beta.k_exponents[l];
	
		overlap += get_overlap_sym(Translation, T_eig);
		if (sec_beta.k_sector) {
			auto PT_eig = T_eig * double(sec_beta.symmetries.p_sym);
			overlap += get_overlap_sym(PT, PT_eig);
			std::rotate(PT.begin(), PT.begin() + 1, PT.end());
		}
		if (sec_beta.h == 0) {
			auto ZT_eig = T_eig * double(sec_beta.symmetries.x_sym);
			overlap += get_overlap_sym(ZT, ZT_eig);
			std::rotate(ZT.begin(), ZT.begin() + 1, ZT.end());
			if (sec_beta.k_sector) {
				auto PZT_eig = ZT_eig * double(sec_beta.symmetries.p_sym);
				overlap += get_overlap_sym(PZT, PZT_eig);
				std::rotate(PZT.begin(), PZT.begin() + 1, PZT.end());
			}
		}
		std::rotate(Translation.begin(), Translation.begin() + 1, Translation.end());
	}
	return overlap;
}